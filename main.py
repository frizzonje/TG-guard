
import asyncio
import os
from typing import Iterable, List, Set, Dict, Union

from dotenv import load_dotenv
from telethon import TelegramClient, events, errors, functions
from telethon.tl.types import Channel, Chat, User, Dialog, Message
from telethon.utils import get_display_name

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
from config import (
    TRACKED, BLACKLIST, EXPORT_GROUP, DELETE_CHUNK, DELETE_PAUSE, ON_START_PURGE,
    DELETE_SAVED_MESSAGES, DELETE_SAVED_DELAY_SECONDS
)

# --- ENV ---
load_dotenv()
API_ID_STR = os.getenv('API_ID')
API_HASH = os.getenv('API_HASH')
SESSION = os.getenv('SESSION')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ API_ID –≤ —á–∏—Å–ª–æ
try:
    API_ID = int(API_ID_STR)
except (ValueError, TypeError):
    print("‚ùå –û—à–∏–±–∫–∞: API_ID –≤ —Ñ–∞–π–ª–µ .env –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    raise SystemExit(1)

if not all([API_ID, API_HASH, SESSION]):
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (API_ID, API_HASH, SESSION) –∑–∞–¥–∞–Ω—ã –≤ —Ñ–∞–π–ª–µ .env.")
    raise SystemExit(1)


# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è ---
ALERT_PREFIX = "üö®üö®üö® "  # –≤—Å–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤ '–ò–∑–±—Ä–∞–Ω–Ω–æ–º' —É–¥–∞–ª—è–µ–º
MD = 'md'


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–∏–ø–æ–≤ —á–∞—Ç–æ–≤ ---
def is_broadcast_channel(entity) -> bool:
    """–ö–∞–Ω–∞–ª (broadcast), –ù–ï —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞."""
    return isinstance(entity, Channel) and not getattr(entity, 'megagroup', False)


def is_supergroup(entity) -> bool:
    """–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞."""
    return isinstance(entity, Channel) and getattr(entity, 'megagroup', False)


def is_basic_group(entity) -> bool:
    """–û–±—ã—á–Ω–∞—è (—Å—Ç–∞—Ä–∞—è) –≥—Ä—É–ø–ø–∞."""
    return isinstance(entity, Chat)


def is_group(entity) -> bool:
    """–õ—é–±–∞—è –≥—Ä—É–ø–ø–∞: –æ–±—ã—á–Ω–∞—è –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ (–Ω–æ –Ω–µ –∫–∞–Ω–∞–ª)."""
    return is_basic_group(entity) or is_supergroup(entity)


def is_personal(entity) -> bool:
    """–õ–∏—á–Ω—ã–π –¥–∏–∞–ª–æ–≥."""
    return isinstance(entity, User)


def normalize_username(x: str) -> str:
    """–£–±–∏—Ä–∞–µ—Ç @ –∏–∑ –Ω–∞—á–∞–ª–∞ —é–∑–µ—Ä–Ω–µ–π–º–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å."""
    return x[1:] if isinstance(x, str) and x.startswith("@") else x


# --- –£—Ç–∏–ª–∏—Ç—ã —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ---
async def resolve_users(client: TelegramClient, ids_or_usernames: Iterable) -> Dict[int, str]:
    """–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤/ID –≤ —Å–ª–æ–≤–∞—Ä—å {user_id: display_name}."""
    resolved: Dict[int, str] = {}
    for item in ids_or_usernames:
        try:
            entity = await client.get_entity(normalize_username(item))
            if isinstance(entity, User):
                resolved[entity.id] = get_display_name(entity) or (entity.username or str(entity.id))
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{item}': {e}")
    return resolved


# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∏ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –≤ '–ò–∑–±—Ä–∞–Ω–Ω–æ–º' ---
async def schedule_delete_message(client: TelegramClient, entity, ids: List[int], delay: int):
    """–ó–∞–¥–µ—Ä–∂–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω—è), —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        await asyncio.sleep(delay)
        if not ids:
            return
        await client.delete_messages(entity, ids, revoke=False)
        print(f"[AUTO-DELETE] ‚úÖ –£–¥–∞–ª–µ–Ω—ã {len(ids)} —Å–æ–æ–±—â. –≤ '{get_display_name(entity) if entity != 'me' else '–ò–∑–±—Ä–∞–Ω–Ω–æ–º'}'")
    except errors.FloodWaitError as e:
        print(f"[AUTO-DELETE] [FLOOD] –ñ–¥—É {e.seconds} —Å–µ–∫...")
        await asyncio.sleep(e.seconds + 1)
    except Exception as e:
        print(f"[AUTO-DELETE] [WARN] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")


async def send_to_saved(client: TelegramClient, text: str, keep: bool = False, parse_mode: str = MD) -> Message:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–±–µ ('–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'). –ï—Å–ª–∏ keep=False –∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º,
    –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ DELETE_SAVED_DELAY_SECONDS.
    """
    msg = await client.send_message("me", text, parse_mode=parse_mode)
    if DELETE_SAVED_MESSAGES and not keep:
        asyncio.create_task(schedule_delete_message(client, "me", [msg.id], DELETE_SAVED_DELAY_SECONDS))
    return msg


def is_alert_message_text(text: str) -> bool:
    """–í–µ—Ä–Ω—É—Ç—å True, –µ—Å–ª–∏ —ç—Ç–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å –∏–∑ '–ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ'."""
    if not isinstance(text, str):
        return False
    return text.startswith(ALERT_PREFIX)


# --- –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def delete_ids_for_me(client: TelegramClient, entity, ids: List[int]) -> int:
    """–£–¥–∞–ª—è–µ—Ç –ø–∞—á–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π '—Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω—è' —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π FloodWait."""
    if not ids:
        return 0

    total_deleted = 0
    for i in range(0, len(ids), DELETE_CHUNK):
        chunk = ids[i:i + DELETE_CHUNK]
        while True:
            try:
                await client.delete_messages(entity, chunk, revoke=False)
                total_deleted += len(chunk)
                await asyncio.sleep(DELETE_PAUSE)
                break
            except errors.FloodWaitError as e:
                print(f"[FLOOD] –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ñ–¥—É {e.seconds} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(e.seconds + 1)
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                break
    return total_deleted


# --- –ü—É—Ä–∂–∏–Ω–≥ –ø–æ –≤—Å–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º –¥–∏–∞–ª–æ–≥–∞–º (–±–µ–∑ –æ–±—ã—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤) ---
async def purge_user_everywhere(client: TelegramClient, user_id: int, user_name: str):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Å–µ—Ö –õ–° –∏ –≥—Ä—É–ø–ø–∞—Ö (–∫–∞–Ω–∞–ª—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è)."""
    print(f"[PURGE] ‚è≥ –ù–∞—á–∏–Ω–∞—é –∑–∞—á–∏—Å—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç '{user_name}'...")
    total_deleted_count = 0
    dialog_count = 0

    try:
        async for dialog in client.iter_dialogs():
            entity = dialog.entity
            # –°–∫–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –õ–° –∏ –≥—Ä—É–ø–ø—ã (–Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞)
            if not (is_personal(entity) or is_group(entity)):
                continue

            dialog_count += 1
            print(f"\r[PURGE] –ü—Ä–æ–≤–µ—Ä—è—é –¥–∏–∞–ª–æ–≥ {dialog_count}: {dialog.name}", end="")
            ids_to_delete: List[int] = []
            try:
                async for msg in client.iter_messages(entity, from_user=user_id):
                    ids_to_delete.append(msg.id)

                if ids_to_delete:
                    deleted_in_chat = await delete_ids_for_me(client, entity, ids_to_delete)
                    total_deleted_count += deleted_in_chat

            except Exception:
                # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —á–∞—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
                pass
    finally:
        print()  # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞

    print(f"[PURGE] ‚úÖ –ó–∞—á–∏—Å—Ç–∫–∞ –¥–ª—è '{user_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_deleted_count}")
    await send_to_saved(
        client,
        f"‚úÖ –ó–∞—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ **{total_deleted_count}** —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç *{user_name}*.",
        keep=False
    )


# --- –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è —Ç–æ–ª—å–∫–æ –≤ –õ–° –∏ –≥—Ä—É–ø–ø–∞—Ö (–±–µ–∑ –∫–∞–Ω–∞–ª–æ–≤) ---
async def initial_presence_scan(client: TelegramClient, tracked_map: Dict[int, str]):
    """
    –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≥–¥–µ —É–∂–µ —Å–æ—Å—Ç–æ—è—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
    - –õ–∏—á–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ (DM)
    - –ì—Ä—É–ø–ø—ã –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
    –ö–∞–Ω–∞–ª—ã (broadcast) –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.
    """
    if not tracked_map:
        return

    print("[SCAN] üïµÔ∏è –ü—Ä–æ–≤–µ—Ä—è—é —Ç–µ–∫—É—â–µ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–õ–° –∏ –≥—Ä—É–ø–ø—ã)...")
    found_count = 0

    async for dialog in client.iter_dialogs():
        entity = dialog.entity

        # 1) –õ–°
        if is_personal(entity):
            user_id = entity.id
            if user_id in tracked_map:
                user_name = tracked_map[user_id]
                message = f"‚ÑπÔ∏è **–£–∂–µ –≤ –ª–∏—á–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ:** `{user_name}`"
                await send_to_saved(client, message, keep=False)
                found_count += 1
            continue

        # 2) –ì—Ä—É–ø–ø—ã –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
        if is_group(entity):
            # –°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ ‚Äî –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞
            if is_supergroup(entity):
                for user_id, user_name in tracked_map.items():
                    try:
                        await client(functions.channels.GetParticipantRequest(
                            channel=entity,
                            participant=user_id
                        ))
                        msg = f"‚ÑπÔ∏è **–£–∂–µ –≤ –≥—Ä—É–ø–ø–µ:** `{user_name}` —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ ¬´*{dialog.name}*¬ª"
                        await send_to_saved(client, msg, keep=False)
                        found_count += 1
                    except errors.UserNotParticipantError:
                        pass
                    except Exception:
                        pass
                continue

            # –û–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —á–∞—Ç–æ–≤)
            if is_basic_group(entity):
                try:
                    participants = await client.get_participants(entity)
                    ids = {p.id for p in participants if isinstance(p, User)}
                    for user_id in list(tracked_map.keys()):
                        if user_id in ids:
                            user_name = tracked_map[user_id]
                            msg = f"‚ÑπÔ∏è **–£–∂–µ –≤ –≥—Ä—É–ø–ø–µ:** `{user_name}` —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ ¬´*{dialog.name}*¬ª"
                            await send_to_saved(client, msg, keep=False)
                            found_count += 1
                except Exception:
                    # –Ω–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                    pass

        # 3) –ö–∞–Ω–∞–ª—ã –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
        # if is_broadcast_channel(entity): continue

    print(f"[SCAN] ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {found_count}.")


# --- –≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
async def get_users_from_group(client: TelegramClient, group_identifier: Union[str, int]):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ (–∫–∞–Ω–∞–ª –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è)."""
    if not group_identifier:
        return set()

    print(f"[EXPORT] ‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ '{group_identifier}'...")
    try:
        group_entity = await client.get_entity(group_identifier)

        if is_broadcast_channel(group_entity):
            print(f"[EXPORT] ‚ÑπÔ∏è '{group_identifier}' —è–≤–ª—è–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–º. –≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω.")
            return set()

        participants = await client.get_participants(group_entity)
        usernames = {f"@{user.username}" for user in participants if isinstance(user, User) and user.username}
        print(f"[EXPORT] ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(usernames)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —é–∑–µ—Ä–Ω–µ–π–º–∞–º–∏.")
        return usernames
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ '{group_identifier}': {e}")
        return set()


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---
async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é Telegram-–∫–ª–∏–µ–Ω—Ç...")
    async with TelegramClient(SESSION, API_ID, API_HASH) as client:
        me = await client.get_me()
        me_id = me.id
        print(f"‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –∫–∞–∫: {get_display_name(me)}")

        # 1) –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –Ω–∞–±–æ—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö (TRACKED + EXPORT_GROUP)
        tracked_users_set = set(TRACKED)
        exported_users = await get_users_from_group(client, EXPORT_GROUP)
        tracked_users_set.update(exported_users)

        # 2) –†–µ–∑–æ–ª–≤–∏–º —é–∑–µ—Ä–Ω–µ–π–º—ã –≤ ID
        tracked_map = await resolve_users(client, tracked_users_set)
        blacklist_map = await resolve_users(client, BLACKLIST)

        tracked_ids: Set[int] = set(tracked_map.keys())
        blacklist_ids: Set[int] = set(blacklist_map.keys())

        print("\n--- –ò—Ç–æ–≥–æ–≤—ã–µ —Å–ø–∏—Å–∫–∏ ---")
        print(f"üëÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º ({len(tracked_map)}): {list(tracked_map.values())}")
        print(f"üö´ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ ({len(blacklist_map)}): {list(blacklist_map.values())}\n")

        # 3) –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

        # 3.1) –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ (–õ–° –∏ –≥—Ä—É–ø–ø—ã, –±–µ–∑ –∫–∞–Ω–∞–ª–æ–≤)
        if blacklist_ids:
            @client.on(events.NewMessage(from_users=list(blacklist_ids), incoming=True))
            async def on_blacklisted_incoming(event: events.NewMessage.Event):
                try:
                    chat = await event.get_chat()
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã
                    if is_broadcast_channel(chat):
                        return
                    await event.delete(revoke=False)
                    # –ë—ã—Å—Ç—Ä–æ –∏ –º–æ–ª—á–∞ —É–¥–∞–ª—è–µ–º, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ª–æ–≥–æ–≤
                except Exception:
                    pass

            # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
            @client.on(events.MessageEdited(from_users=list(blacklist_ids)))
            async def on_blacklisted_edited(event: events.MessageEdited.Event):
                try:
                    chat = await event.get_chat()
                    if is_broadcast_channel(chat):
                        return
                    await event.delete(revoke=False)
                except Exception:
                    pass

        # 3.2) –û–ø–æ–≤–µ—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—Ç—É–ø–∏–ª –≤ –≥—Ä—É–ø–ø—É
        if tracked_ids:
            @client.on(events.ChatAction)
            async def on_chat_action(event: events.ChatAction.Event):
                # –ù–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ç–æ–ª—å–∫–æ join/add —Å–æ–±—ã—Ç–∏—è –∏ —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã
                if not (event.user_joined or event.user_added):
                    return
                chat = await event.get_chat()
                if not is_group(chat):
                    return
                users = await event.get_users()
                for user in users:
                    if user.id in tracked_ids:
                        await send_to_saved(
                            client,
                            f"{ALERT_PREFIX}**–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!**\n\n"
                            f"**–ö—Ç–æ:** `{get_display_name(user)}`\n"
                            f"**–ì–¥–µ:** ¬´*{get_display_name(chat)}*¬ª",
                            keep=True
                        )

        # 3.3) –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ '–ò–∑–±—Ä–∞–Ω–Ω–æ–º' (–∫—Ä–æ–º–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –∏ –∑–∞–∫—Ä–µ–ø–æ–≤)
        if DELETE_SAVED_MESSAGES:
            @client.on(events.NewMessage(incoming=True, outgoing=True))
            async def on_saved_new_message(event: events.NewMessage.Event):
                try:
                    if event.chat_id != me_id:
                        return
                    # –ü–∏–Ω–Ω—É—Ç—ã–µ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
                    if event.message and event.message.pinned:
                        return
                    text = event.raw_text or ""
                    if is_alert_message_text(text):
                        # –û–ø–æ–≤–µ—â–µ–Ω–∏—è ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º
                        return
                    # –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É
                    asyncio.create_task(
                        schedule_delete_message(
                            client, "me", [event.id], DELETE_SAVED_DELAY_SECONDS
                        )
                    )
                except Exception:
                    pass

        # 4) –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if ON_START_PURGE and blacklist_ids:
            print("[START] üßπ –ü—Ä–æ–≤–æ–¥–∏–º –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞—á–∏—Å—Ç–∫—É –ø–æ —á—ë—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É...")
            for user_id, user_name in blacklist_map.items():
                await purge_user_everywhere(client, user_id, user_name)

        if tracked_ids:
            # –°–æ–æ–±—â–µ–Ω–∏—è —Å–∫–∞–Ω–∞ —Å–∞–º–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã, —Ç.–∫. send_to_saved –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ
            await initial_presence_scan(client, tracked_map)

        print("\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è...")
        await client.run_until_disconnected()


if __name__ == "__main__":
    asyncio.run(main())
