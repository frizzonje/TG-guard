import asyncio
import os
from typing import Iterable, List, Set, Dict, Union

from dotenv import load_dotenv
from telethon import TelegramClient, events, errors, functions
from telethon.tl.types import Channel, Chat, User, Dialog
from telethon.utils import get_display_name

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
from config import (
    TRACKED, BLACKLIST, EXPORT_GROUP, DELETE_CHUNK, DELETE_PAUSE, ON_START_PURGE,
    DELETE_SAVED_MESSAGES, DELETE_SAVED_DELAY_SECONDS
)

load_dotenv()

API_ID_STR = os.getenv('API_ID')
API_HASH = os.getenv('API_HASH')
SESSION = os.getenv('SESSION')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ API_ID –≤ —á–∏—Å–ª–æ
try:
    API_ID = int(API_ID_STR)
except (ValueError, TypeError):
    print("‚ùå –û—à–∏–±–∫–∞: API_ID –≤ —Ñ–∞–π–ª–µ .env –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    exit(1)

if not all([API_ID, API_HASH, SESSION]):
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (API_ID, API_HASH, SESSION) –∑–∞–¥–∞–Ω—ã –≤ —Ñ–∞–π–ª–µ .env.")
    exit(1)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def is_group(entity) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—É—â–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π (–Ω–æ –Ω–µ –∫–∞–Ω–∞–ª–æ–º).
    """
    if isinstance(entity, Chat):
        return True  # –≠—Ç–æ —Å—Ç–∞—Ä–∞—è, –æ–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞
    if isinstance(entity, Channel) and getattr(entity, 'megagroup', False):
        return True  # –≠—Ç–æ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞
    return False


def normalize_username(x: str) -> str:
    """–£–±–∏—Ä–∞–µ—Ç @ –∏–∑ –Ω–∞—á–∞–ª–∞ —é–∑–µ—Ä–Ω–µ–π–º–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å."""
    return x[1:] if isinstance(x, str) and x.startswith("@") else x


async def resolve_users(client: TelegramClient, ids_or_usernames: Iterable) -> Dict[int, str]:
    """–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤/ID –≤ —Å–ª–æ–≤–∞—Ä—å {user_id: display_name}."""
    resolved = {}
    for item in ids_or_usernames:
        try:
            entity = await client.get_entity(normalize_username(item))
            if isinstance(entity, User):
                resolved[entity.id] = get_display_name(entity) or (entity.username or str(entity.id))
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{item}': {e}")
    return resolved


async def schedule_saved_message_deletion(event: events.NewMessage.Event, delay: int):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∂–¥–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –∑–∞—Ç–µ–º —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥.
    """
    try:
        await asyncio.sleep(delay)
        await event.delete(revoke=False)
        print(f"[AUTO-DELETE] ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {event.id} –≤ '–ò–∑–±—Ä–∞–Ω–Ω–æ–º' —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
        print(f"[AUTO-DELETE] [WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {event.id}: {e}")


async def delete_ids_for_me(client: TelegramClient, entity, ids: List[int]) -> int:
    """–£–¥–∞–ª—è–µ—Ç –ø–∞—á–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π '—Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω—è' —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π FloodWait."""
    if not ids:
        return 0
    
    total_deleted = 0
    for i in range(0, len(ids), DELETE_CHUNK):
        chunk = ids[i:i + DELETE_CHUNK]
        while True:
            try:
                # revoke=False => "—É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω—è"
                await client.delete_messages(entity, chunk, revoke=False)
                total_deleted += len(chunk)
                await asyncio.sleep(DELETE_PAUSE)
                break
            except errors.FloodWaitError as e:
                print(f"[FLOOD] –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ñ–¥—É {e.seconds} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(e.seconds + 1)
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                break  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –ø–∞—á–∫—É –ø—Ä–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –æ—à–∏–±–∫–µ
    return total_deleted


async def purge_user_everywhere(client: TelegramClient, user_id: int, user_name: str):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤—Å–µ–º –¥–∏–∞–ª–æ–≥–∞–º."""
    print(f"[PURGE] ‚è≥ –ù–∞—á–∏–Ω–∞—é –∑–∞—á–∏—Å—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç '{user_name}'...")
    total_deleted_count = 0
    dialog_count = 0
    
    try:
        async for dialog in client.iter_dialogs():
            dialog_count += 1
            print(f"\r[PURGE] –ü—Ä–æ–≤–µ—Ä—è—é –¥–∏–∞–ª–æ–≥ {dialog_count}: {dialog.name}", end="")
            ids_to_delete = []
            try:
                async for msg in client.iter_messages(dialog.entity, from_user=user_id):
                    ids_to_delete.append(msg.id)
                
                if ids_to_delete:
                    deleted_in_chat = await delete_ids_for_me(client, dialog.entity, ids_to_delete)
                    total_deleted_count += deleted_in_chat

            except Exception as e:
                # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —á–∞—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                pass
    finally:
        print() # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞
        
    print(f"[PURGE] ‚úÖ –ó–∞—á–∏—Å—Ç–∫–∞ –¥–ª—è '{user_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_deleted_count}")
    await client.send_message(
        "me",
        f"‚úÖ –ó–∞—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ **{total_deleted_count}** —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç *{user_name}*."
    )


async def initial_presence_scan(client: TelegramClient, tracked_map: Dict[int, str]):
    """–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤ –∫–∞–∫–∏—Ö –≥—Ä—É–ø–ø–∞—Ö —É–∂–µ —Å–æ—Å—Ç–æ—è—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏."""
    print("[SCAN] üïµÔ∏è –ü—Ä–æ–≤–µ—Ä—è—é —Ç–µ–∫—É—â–µ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö)...")
    found_count = 0
    async for dialog in client.iter_dialogs():
        if is_group(dialog.entity):
            for user_id, user_name in tracked_map.items():
                try:
                    await client(functions.channels.GetParticipantRequest(channel=dialog.entity, participant=user_id))
                    message = f"‚ÑπÔ∏è **–£–∂–µ –≤ –≥—Ä—É–ø–ø–µ:** `{user_name}` —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ ¬´*{dialog.name}*¬ª"
                    await client.send_message("me", message, parse_mode='md')
                    found_count += 1
                except errors.UserNotParticipantError:
                    pass
                except Exception:
                    pass
    print(f"[SCAN] ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {found_count}.")


async def get_users_from_group(client: TelegramClient, group_identifier: Union[str, int]):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö —é–∑–µ—Ä–Ω–µ–π–º—ã."""
    if not group_identifier:
        return set()
        
    print(f"[EXPORT] ‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã '{group_identifier}'...")
    try:
        group_entity = await client.get_entity(group_identifier)
        participants = await client.get_participants(group_entity)
        
        usernames = {f"@{user.username}" for user in participants if user.username}
        print(f"[EXPORT] ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(usernames)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —é–∑–µ—Ä–Ω–µ–π–º–∞–º–∏.")
        return usernames
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ '{group_identifier}': {e}")
        return set()


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---

async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é Telegram-–∫–ª–∏–µ–Ω—Ç...")
    async with TelegramClient(SESSION, API_ID, API_HASH) as client:
        me = await client.get_me()
        print(f"‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –∫–∞–∫: {get_display_name(me)}")

        # 1. –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        tracked_users_set = set(TRACKED)
        exported_users = await get_users_from_group(client, EXPORT_GROUP)
        tracked_users_set.update(exported_users)

        # 2. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —é–∑–µ—Ä–Ω–µ–π–º—ã –≤ ID –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã
        tracked_map = await resolve_users(client, tracked_users_set)
        blacklist_map = await resolve_users(client, BLACKLIST)
        
        tracked_ids: Set[int] = set(tracked_map.keys())
        blacklist_ids: Set[int] = set(blacklist_map.keys())

        print("\n--- –ò—Ç–æ–≥–æ–≤—ã–µ —Å–ø–∏—Å–∫–∏ ---")
        print(f"üëÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º ({len(tracked_map)}): {list(tracked_map.values())}")
        print(f"üö´ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ ({len(blacklist_map)}): {list(blacklist_map.values())}\n")

        # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if ON_START_PURGE and blacklist_ids:
            for user_id, user_name in blacklist_map.items():
                await purge_user_everywhere(client, user_id, user_name)

        if tracked_ids:
            await initial_presence_scan(client, tracked_map)

        # 4. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        @client.on(events.ChatAction)
        async def on_chat_action(event: events.ChatAction.Event):
            if not (event.user_joined or event.user_added):
                return
            chat = await event.get_chat()
            if not is_group(chat):
                return
            users = await event.get_users()
            for user in users:
                if user.id in tracked_ids:
                    await client.send_message(
                        "me",
                        f"üö®üö®üö® **–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!** üö®üö®üö®\n\n"
                        f"**–ö—Ç–æ:** `{get_display_name(user)}`\n"
                        f"**–ì–¥–µ:** ¬´*{get_display_name(chat)}*¬ª",
                        parse_mode='md'
                    )

        @client.on(events.NewMessage)
        async def on_new_message(event: events.NewMessage.Event):
            # 1. –õ–æ–≥–∏–∫–∞ –¥–ª—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            if event.sender_id in blacklist_ids:
                try:
                    await event.delete(revoke=False)
                except Exception:
                    pass # –û—à–∏–±–∫–∏ —Ç—É—Ç –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã
            
            # 2. –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ "–ò–∑–±—Ä–∞–Ω–Ω–æ–º"
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –æ–ø—Ü–∏—è –∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –¥–∏–∞–ª–æ–≥–æ–º —Å —Å–∞–º–∏–º —Å–æ–±–æ–π
            if DELETE_SAVED_MESSAGES and event.chat_id == me.id:
                if event.raw_text.startswith("üö®üö®üö® **–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!**"):
                    print(f"[AUTO-DELETE] ‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ {event.id} —è–≤–ª—è–µ—Ç—Å—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ–º - –Ω–µ —É–¥–∞–ª—è–µ–º.")
                else:
                    print(
                        f"[AUTO-DELETE] ‚è≥ –°–æ–æ–±—â–µ–Ω–∏–µ {event.id} –≤ '–ò–∑–±—Ä–∞–Ω–Ω–æ–º' –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ "
                        f"—á–µ—Ä–µ–∑ {DELETE_SAVED_DELAY_SECONDS} —Å–µ–∫."
                    )
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    asyncio.create_task(
                        schedule_saved_message_deletion(event, DELETE_SAVED_DELAY_SECONDS)
                    )

        print("\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è...")
        await client.run_until_disconnected()


if __name__ == "__main__":
    asyncio.run(main())