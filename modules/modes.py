from typing import Dict
from telethon import TelegramClient, events, errors, functions
from telethon.utils import get_display_name

from .config_manager import get_config
from .utils import is_group, is_broadcast_channel, is_personal, is_supergroup, is_basic_group
from .message_handler import send_to_saved, purge_user_everywhere


async def mode_tracked_scanning(client: TelegramClient, tracked_map: Dict[int, str]):
    """–†–µ–∂–∏–º 1: –¢–æ–ª—å–∫–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è TRACKED –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    print("\nüîç –†–µ–∂–∏–º: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è TRACKED –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("="*50)
    
    if not tracked_map:
        print("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ TRACKED –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å.")
        return
    
    config = get_config()
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—ã
    tracked_ids = set(tracked_map.keys())
    
    @client.on(events.ChatAction)
    async def on_chat_action(event: events.ChatAction.Event):
        # –ù–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ç–æ–ª—å–∫–æ join/add —Å–æ–±—ã—Ç–∏—è –∏ —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã
        if not (event.user_joined or event.user_added):
            return
        chat = await event.get_chat()
        if not is_group(chat):
            return
        users = await event.get_users()
        for user in users:
            if user.id in tracked_ids:
                await send_to_saved(
                    client,
                    f"{config['ALERT_PREFIX']}**–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!**\n\n"
                    f"**–ö—Ç–æ:** `{get_display_name(user)}`\n"
                    f"**–ì–¥–µ:** ¬´*{get_display_name(chat)}*¬ª",
                    keep=True
                )
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    await initial_presence_scan(client, tracked_map)
    print("‚úÖ –†–µ–∂–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–∂–∏–¥–∞—é –Ω–æ–≤—ã—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π...")


async def mode_blacklist_purge_all(client: TelegramClient, blacklist_map: Dict[int, str]):
    """–†–µ–∂–∏–º 2: –£–¥–∞–ª–µ–Ω–∏–µ –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π BLACKLIST –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    print("\nüßπ –†–µ–∂–∏–º: –£–¥–∞–ª–µ–Ω–∏–µ –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π BLACKLIST –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("="*50)
    
    if not blacklist_map:
        print("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ BLACKLIST –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
        return
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    blacklist_ids = set(blacklist_map.keys())
    
    @client.on(events.NewMessage(from_users=list(blacklist_ids), incoming=True))
    async def on_blacklisted_incoming(event: events.NewMessage.Event):
        try:
            chat = await event.get_chat()
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã
            if is_broadcast_channel(chat):
                return
            await event.delete(revoke=False)
            print(f"üö´ –£–¥–∞–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {get_display_name(await event.get_sender())}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    @client.on(events.MessageEdited(from_users=list(blacklist_ids)))
    async def on_blacklisted_edited(event: events.MessageEdited.Event):
        try:
            chat = await event.get_chat()
            if is_broadcast_channel(chat):
                return
            await event.delete(revoke=False)
            print(f"üö´ –£–¥–∞–ª–µ–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {get_display_name(await event.get_sender())}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    print("üßπ –ù–∞—á–∏–Ω–∞—é –∑–∞—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
    for user_id, user_name in blacklist_map.items():
        await purge_user_everywhere(client, user_id, user_name)
    
    print("‚úÖ –†–µ–∂–∏–º –ø–æ–ª–Ω–æ–π –∑–∞—á–∏—Å—Ç–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –£–¥–∞–ª—è—é –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")


async def mode_blacklist_new_only(client: TelegramClient, blacklist_map: Dict[int, str]):
    """–†–µ–∂–∏–º 3: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ù–û–í–´–• —Å–æ–æ–±—â–µ–Ω–∏–π BLACKLIST –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    print("\nüö´ –†–µ–∂–∏–º: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ù–û–í–´–• —Å–æ–æ–±—â–µ–Ω–∏–π BLACKLIST –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("="*50)
    
    if not blacklist_map:
        print("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ BLACKLIST –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
        return
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    blacklist_ids = set(blacklist_map.keys())
    
    @client.on(events.NewMessage(from_users=list(blacklist_ids), incoming=True))
    async def on_blacklisted_incoming(event: events.NewMessage.Event):
        try:
            chat = await event.get_chat()
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã
            if is_broadcast_channel(chat):
                return
            await event.delete(revoke=False)
            sender = await event.get_sender()
            chat_name = get_display_name(chat)
            print(f"üö´ –£–¥–∞–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {get_display_name(sender)} –≤ {chat_name}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    @client.on(events.MessageEdited(from_users=list(blacklist_ids)))
    async def on_blacklisted_edited(event: events.MessageEdited.Event):
        try:
            chat = await event.get_chat()
            if is_broadcast_channel(chat):
                return
            await event.delete(revoke=False)
            sender = await event.get_sender()
            chat_name = get_display_name(chat)
            print(f"üö´ –£–¥–∞–ª–µ–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {get_display_name(sender)} –≤ {chat_name}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    print("‚úÖ –†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—Ç—Å—è.")


async def mode_combined(client: TelegramClient, tracked_map: Dict[int, str], blacklist_map: Dict[int, str]):
    """–†–µ–∂–∏–º 4: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º - –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏."""
    print("\nüîÑ –†–µ–∂–∏–º: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (–≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏)")
    print("="*50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ä–µ–∂–∏–º—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    if tracked_map:
        await mode_tracked_scanning(client, tracked_map)
    
    if blacklist_map:
        # –í –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é –∑–∞—á–∏—Å—Ç–∫—É
        await mode_blacklist_purge_all(client, blacklist_map)
    
    print("‚úÖ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.")


async def initial_presence_scan(client: TelegramClient, tracked_map: Dict[int, str]):
    """
    –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≥–¥–µ —É–∂–µ —Å–æ—Å—Ç–æ—è—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
    - –õ–∏—á–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ (DM)
    - –ì—Ä—É–ø–ø—ã –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
    –ö–∞–Ω–∞–ª—ã (broadcast) –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.
    """
    if not tracked_map:
        return

    print("[SCAN] üïµÔ∏è –ü—Ä–æ–≤–µ—Ä—è—é —Ç–µ–∫—É—â–µ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–õ–° –∏ –≥—Ä—É–ø–ø—ã)...")
    found_count = 0

    async for dialog in client.iter_dialogs():
        entity = dialog.entity

        # 1) –õ–°
        if is_personal(entity):
            user_id = entity.id
            if user_id in tracked_map:
                user_name = tracked_map[user_id]
                message = f"‚ÑπÔ∏è **–£–∂–µ –≤ –ª–∏—á–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ:** `{user_name}`"
                await send_to_saved(client, message, keep=False)
                found_count += 1
            continue

        # 2) –ì—Ä—É–ø–ø—ã –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
        if is_group(entity):
            # –°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ ‚Äî –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞
            if is_supergroup(entity):
                for user_id, user_name in tracked_map.items():
                    try:
                        await client(functions.channels.GetParticipantRequest(
                            channel=entity,
                            participant=user_id
                        ))
                        msg = f"‚ÑπÔ∏è **–£–∂–µ –≤ –≥—Ä—É–ø–ø–µ:** `{user_name}` —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ ¬´*{dialog.name}*¬ª"
                        await send_to_saved(client, msg, keep=False)
                        found_count += 1
                    except errors.UserNotParticipantError:
                        pass
                    except Exception:
                        pass
                continue

            # –û–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —á–∞—Ç–æ–≤)
            if is_basic_group(entity):
                try:
                    participants = await client.get_participants(entity)
                    from telethon.tl.types import User
                    ids = {p.id for p in participants if isinstance(p, User)}
                    for user_id in list(tracked_map.keys()):
                        if user_id in ids:
                            user_name = tracked_map[user_id]
                            msg = f"‚ÑπÔ∏è **–£–∂–µ –≤ –≥—Ä—É–ø–ø–µ:** `{user_name}` —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ ¬´*{dialog.name}*¬ª"
                            await send_to_saved(client, msg, keep=False)
                            found_count += 1
                except Exception:
                    # –Ω–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                    pass

        # 3) –ö–∞–Ω–∞–ª—ã –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
        # if is_broadcast_channel(entity): continue

    print(f"[SCAN] ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {found_count}.")


async def get_users_from_group(client: TelegramClient, group_identifier):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ (–∫–∞–Ω–∞–ª –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è)."""
    if not group_identifier:
        return set()

    print(f"[EXPORT] ‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ '{group_identifier}'...")
    try:
        group_entity = await client.get_entity(group_identifier)

        if is_broadcast_channel(group_entity):
            print(f"[EXPORT] ‚ÑπÔ∏è '{group_identifier}' —è–≤–ª—è–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–º. –≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω.")
            return set()

        participants = await client.get_participants(group_entity)
        from telethon.tl.types import User
        usernames = {f"@{user.username}" for user in participants if isinstance(user, User) and user.username}
        print(f"[EXPORT] ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(usernames)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —é–∑–µ—Ä–Ω–µ–π–º–∞–º–∏.")
        return usernames
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ '{group_identifier}': {e}")
        return set()
